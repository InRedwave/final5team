<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oti.srm.dao.srm.IRequestDao">
	<insert id="insertRequest"
		parameterType="com.oti.srm.dto.Request">
		<selectKey keyProperty="rno" resultType="int" order="BEFORE">
			select
			SEQ_REQUESTS.nextval
			from dual
		</selectKey>
		insert into requests (RNO, REQ_DATE, REQ_TITLE, REQ_CONTENT, CLIENT,
		SNO, REQ_EXPECT_DATE, STATUS_NO)
		values(#{rno}, sysdate, #{reqTitle},
		#{reqContent}, #{client}, #{sno}, #{reqExpectDate}, #{statusNo})
	</insert>

	<select id="getRequestList" resultType="com.oti.srm.dto.Request">
		select RNO, REQ_DATE as
		"reqDate", REQ_TITLE as "reqTitle", REQ_CONTENT as "reqContent",
		CLIENT, SNO, REQ_EXPECT_DATE as "reqExpectDate", STATUS_NO as
		"statusNo"
		from requests
	</select>

	<select id="getPresentStep" parameterType="int" resultType="int">
		select NEXT_STATUS
		from (
		select rownum as rnum, NEXT_STATUS,CHANGE_DATE
		from(
		select rownum, NEXT_STATUS,CHANGE_DATE from status_histories
		where rno = #{rno}
		order by CHANGE_DATE desc
		)
		order by rnum
		)
		where rnum=1
	</select>

	<select id="selectRequest" parameterType="String"
		resultType="int">
		select max(rno) as "rno"
		from requests
		where client =
		#{client}
	</select>





	<select id="countPm" parameterType="com.oti.srm.dto.ListFilter"
		resultType="int">
		select count(*)
		from ( select rownum as rnum, r.RNO, r.REQ_DATE, r.REQ_TITLE,
		r.REQ_CONTENT, r.CLIENT, r.SNO, r.REQ_EXPECT_DATE, r.STATUS_NO,
		rp.REQ_TYPE, rp.DEVELOPER, rp.TESTER, rp.DISTRIBUTOR, rp.PM,
		rp.USER_TESTER
		from requests r left join request_process rp
		on r.RNO = rp.RNO
		order by r.req_date desc
		)
		<where>
			<if test='sno != "0"'>
				sno = #{sno}
			</if>
			<if test='!reqType.equals("전체")'>
				REQ_TYPE = #{reqType}
			</if>
			<if test="statusNo neq 0">
				statusNo = #{statusNo}
			</if>
			<if test='dateValue.equals("zero")'>
				<![CDATA[
					and REQ_DATE <= sysdate
				]]>
			</if>
			<if test='dateValue.equals("first")'>
				<![CDATA[
					and REQ_DATE <= to_date(#{dateLast}, 'YYYY-MM-DD')
				]]>
			</if>
			<if test='dateValue.equals("last")'>
				<![CDATA[
					and to_date(#{dateFirst}, 'YYYY-MM-DD') <= REQ_DATE
				]]>
			</if>
			<if test='dateValue.equals("both")'>
				<![CDATA[
					and REQ_DATE between to_date(#{dateFirst}, 'YYYY-MM-DD') and to_date(#{dateLast}, 'YYYY-MM-DD')
				]]>
			</if>
		</where>
	</select>



	<select id="selectPmRequestList" parameterType="hashmap"
		resultType="com.oti.srm.dto.SelectPM">
		<![CDATA[
		select j.RNO, j.REQ_DATE as "reqDate" , j.REQ_TITLE as "reqTitle", j.REQ_CONTENT as "reqContent", 
		 		j.CLIENT, j.SNO, j.REQ_EXPECT_DATE as "reqExpectDate", j.STATUS_NO as "statusNo",
		                j.REQ_TYPE as "reqType", j.DEVELOPER, j.TESTER, j.DISTRIBUTOR, j.PM, j.USER_TESTER as "userTester"
		            from (
		            select r.RNO, r.REQ_DATE, r.REQ_TITLE, r.REQ_CONTENT, r.CLIENT, r.SNO, r.REQ_EXPECT_DATE, r.STATUS_NO,
		                    rp.REQ_TYPE, rp.DEVELOPER, rp.TESTER, rp.DISTRIBUTOR, rp.PM, rp.USER_TESTER
		            from requests r left join request_process rp
		            on r.RNO = rp.RNO
		            
		    ]]>
		<where>
			<if test='listFilter.sno != 0'>
				sno = #{listFilter.sno}
			</if>
			<if test='listFilter.reqType neq"전체"'>
				<![CDATA[
					REQ_TYPE = #{listFilter.reqType}
				]]>
			</if>
			<if test='listFilter.dateValue.equals("zero")'>
				<![CDATA[
					and REQ_DATE <= sysdate
				]]>
			</if>
			<if test='listFilter.dateValue.equals("first")'>
				<![CDATA[
					and REQ_DATE <= to_date(#{listFilter.dateLast}, 'YYYY-MM-DD')
				]]>
			</if>
			<if test='listFilter.dateValue.equals("last")'>
				<![CDATA[
					and to_date(#{listFilter.dateFirst}, 'YYYY-MM-DD') <= REQ_DATE
				]]>
			</if>
			<if test='listFilter.dateValue.equals("both")'>
				<![CDATA[
					and REQ_DATE between to_date(#{listFilter.dateFirst}, 'YYYY-MM-DD') and to_date(#{listFilter.dateLast}, 'YYYY-MM-DD')
				]]>
			</if>
			
			
		</where>
			
			order by r.req_date desc
			) j offset #{pager.startRowNo} rows fetch next #{pager.endRowNo} rows only
			
			
	</select>



</mapper>